[{"/home/hafizur/projects/push-panel/frontend/src/index.js":"1","/home/hafizur/projects/push-panel/frontend/src/App.js":"2","/home/hafizur/projects/push-panel/frontend/src/reportWebVitals.js":"3","/home/hafizur/projects/push-panel/frontend/src/url.js":"4","/home/hafizur/projects/push-panel/frontend/src/changePassword.js":"5","/home/hafizur/projects/push-panel/frontend/src/dataProvider/index.js":"6","/home/hafizur/projects/push-panel/frontend/src/authProvider/index.js":"7","/home/hafizur/projects/push-panel/frontend/src/lists/country.jsx":"8","/home/hafizur/projects/push-panel/frontend/src/lists/sites.jsx":"9","/home/hafizur/projects/push-panel/frontend/src/lists/reports.jsx":"10","/home/hafizur/projects/push-panel/frontend/src/dashboard/index.js":"11","/home/hafizur/projects/push-panel/frontend/src/sendNotification/index.js":"12","/home/hafizur/projects/push-panel/frontend/src/integrate/index.js":"13","/home/hafizur/projects/push-panel/frontend/src/dataProvider/session.js":"14","/home/hafizur/projects/push-panel/frontend/src/dataProvider/getCountriesList.js":"15","/home/hafizur/projects/push-panel/frontend/src/dataProvider/getReportList.js":"16","/home/hafizur/projects/push-panel/frontend/src/dataProvider/getStieList.js":"17","/home/hafizur/projects/push-panel/frontend/src/authProvider/login.js":"18","/home/hafizur/projects/push-panel/frontend/src/dataProvider/getTemplateList.js":"19","/home/hafizur/projects/push-panel/frontend/src/creates/createTemplate.jsx":"20","/home/hafizur/projects/push-panel/frontend/src/dataProvider/createTemplate.js":"21","/home/hafizur/projects/push-panel/frontend/src/lists/templates.jsx":"22","/home/hafizur/projects/push-panel/frontend/src/dataProvider/deleteTemplate.js":"23","/home/hafizur/projects/push-panel/frontend/src/lists/schedule.jsx":"24"},{"size":500,"mtime":1611728395868,"results":"25","hashOfConfig":"26"},{"size":1751,"mtime":1619794856208,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1611728395872,"results":"28","hashOfConfig":"26"},{"size":96,"mtime":1636532449565,"results":"29","hashOfConfig":"26"},{"size":2458,"mtime":1611728395868,"results":"30","hashOfConfig":"26"},{"size":1589,"mtime":1617019131348,"results":"31","hashOfConfig":"26"},{"size":911,"mtime":1611728395868,"results":"32","hashOfConfig":"26"},{"size":457,"mtime":1611728395868,"results":"33","hashOfConfig":"26"},{"size":523,"mtime":1611728395872,"results":"34","hashOfConfig":"26"},{"size":595,"mtime":1619760189313,"results":"35","hashOfConfig":"26"},{"size":6908,"mtime":1611728395868,"results":"36","hashOfConfig":"26"},{"size":10304,"mtime":1629216130979,"results":"37","hashOfConfig":"26"},{"size":1433,"mtime":1619800863039,"results":"38","hashOfConfig":"26"},{"size":705,"mtime":1611728395868,"results":"39","hashOfConfig":"26"},{"size":1174,"mtime":1611728395868,"results":"40","hashOfConfig":"26"},{"size":1528,"mtime":1611728395868,"results":"41","hashOfConfig":"26"},{"size":1171,"mtime":1611728395868,"results":"42","hashOfConfig":"26"},{"size":804,"mtime":1611728395868,"results":"43","hashOfConfig":"26"},{"size":1206,"mtime":1626169180800,"results":"44","hashOfConfig":"26"},{"size":1285,"mtime":1629218804597,"results":"45","hashOfConfig":"26"},{"size":879,"mtime":1629218905726,"results":"46","hashOfConfig":"26"},{"size":2677,"mtime":1629224496592,"results":"47","hashOfConfig":"26"},{"size":301,"mtime":1617019129225,"results":"48","hashOfConfig":"26"},{"size":2639,"mtime":1619813690371,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1l2h4ll",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"52"},"/home/hafizur/projects/push-panel/frontend/src/index.js",[],["109","110"],"/home/hafizur/projects/push-panel/frontend/src/App.js",["111"],"import logo from \"./logo.svg\";\nimport { Admin, Resource } from \"react-admin\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport API_URL from \"./url\";\n\n//importing components\nimport Dashboard from \"./dashboard\";\nimport CountryList from \"./lists/country\";\nimport ReportList from \"./lists/reports\";\nimport TemplateList from \"./lists/templates\";\n\n//importing functions and objects\nimport custmDataProvider from \"./dataProvider/index\";\nimport MyAuthProvider from \"./authProvider/index\";\nimport siteList from \"./lists/sites\";\nimport SendNotification from \"./sendNotification\";\nimport Integrate from \"./integrate\";\nimport ChangePassword from \"./changePassword\";\nimport CreateTemplate from \"./creates/createTemplate\";\nimport Schedule from \"./lists/schedule\";\n\nlet dp = new custmDataProvider(API_URL);\n//\"https://ingame-item-topup-api.herokuapp.com/api\"\n//\"http://localhost:80/api\"\n//\"http://localhost:8000/api\"\n//\"https://allinonepush.live/api\"\nconsole.log(dp.getList());\nlet myap = new MyAuthProvider(\n  //\"https://ingame-item-topup-api.herokuapp.com/api\"\n  //\"http://localhost:8000/api\"\n  //\"https://allinonepush.live/api\"\n  API_URL\n);\n\nfunction App() {\n  return (\n    <Admin dataProvider={dp} authProvider={myap} dashboard={Dashboard}>\n      <Resource name=\"Sites\" list={siteList} />\n      <Resource name=\"Country Stats\" list={CountryList} />\n      <Resource name=\"Reports\" list={ReportList} />\n      <Resource name=\"Templates\" list={TemplateList} create={CreateTemplate} />\n      <Resource name=\"Send Notification\" list={SendNotification} />\n      <Resource name=\"Schedule\" list={Schedule} />\n      <Resource name=\"How To Integrate\" list={Integrate} />\n      <Resource name=\"Accounts\" list={ChangePassword} />\n    </Admin>\n  );\n}\n\nexport default App;\n","/home/hafizur/projects/push-panel/frontend/src/reportWebVitals.js",[],"/home/hafizur/projects/push-panel/frontend/src/url.js",["112"],"/home/hafizur/projects/push-panel/frontend/src/changePassword.js",["113"],"import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { getHeader } from \"./dataProvider/session\";\nimport API_URL from \"./url\";\n\nexport default function ChangePassword() {\n  const [oldPassword, setOldPassword] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  const [error, setError] = useState(\"\");\n\n  //const [user, setUser] = useState(\"\");\n\n  useEffect(() => {\n    if (buttonClicked) {\n      console.log(\"buttonis clicked\");\n      let body = {};\n      body.oldPassword = oldPassword;\n      body.newPassword = password;\n\n      changePass(body);\n    }\n  }, [buttonClicked]);\n\n  async function changePass(body) {\n    let url = `${API_URL}/auth/changepassword`;\n\n    const response = await fetch(url, {\n      // headers: headers,\n      headers: getHeader(), //mode: \"no-cors\",\n      method: \"PATCH\",\n      body: JSON.stringify(body),\n    });\n\n    console.log(\"the header is :\", response.headers);\n    let resbody = await response.json();\n    console.log(\"the effing resbody is\", resbody);\n\n    if (resbody.err) {\n      setError(resbody.err);\n      setButtonClicked(false);\n    } else {\n      localStorage.clear();\n      return;\n    }\n  }\n\n  return (\n    //{loggedIn}\n    //{loggedIn || <Redirect to=\"/\" />}\n    <form\n      className=\"container mt-50\"\n      style={{\n        marginTop: \"50px\",\n      }}\n    >\n      {error === \"\" || (\n        <div class=\"alert alert-danger\">\n          <strong>Error!</strong> {error}\n        </div>\n      )}\n      <div class=\"form-group\">\n        <label for=\"usr\">Old Password:</label>\n        <input\n          type=\"password\"\n          class=\"form-control\"\n          id=\"usr\"\n          required\n          value={oldPassword}\n          onChange={(e) => {\n            setOldPassword(e.target.value);\n          }}\n        />\n      </div>\n      <div class=\"form-group\">\n        <label for=\"pwd\">New Password:</label>\n        <input\n          type=\"password\"\n          class=\"form-control\"\n          id=\"pwd\"\n          required\n          value={password}\n          onChange={(e) => {\n            setPassword(e.target.value);\n          }}\n        />\n      </div>\n      <div>\n        <input\n          type=\"submit\"\n          value=\"Apply\"\n          class=\"btn btn-primary\"\n          onClick={(e) => {\n            e.preventDefault();\n            setButtonClicked(true);\n          }}\n        />\n      </div>\n    </form>\n  );\n}\n","/home/hafizur/projects/push-panel/frontend/src/dataProvider/index.js",["114"],"import { getHeader } from \"./session\";\nimport getCountrys from \"./getCountriesList\";\nimport getReports from \"./getReportList\";\nimport getSites from \"./getStieList\";\nimport getTemplates from \"./getTemplateList\";\nimport createTemplate from \"./createTemplate\";\nimport deleteTemplate from \"./deleteTemplate\";\n\nexport default class customDataProvider {\n  constructor(API_URL) {\n    this.API_URL = API_URL;\n  }\n  getList(resource, params) {\n    try {\n      if (resource === \"Country Stats\") {\n        return getCountrys(this.API_URL, resource, params);\n      }\n      if (resource === \"Reports\") {\n        return getReports(this.API_URL, resource, params);\n      }\n      if (resource === \"Templates\") {\n        return getTemplates(this.API_URL, resource, params);\n      }\n      if (resource === \"Sites\") {\n        return getSites(this.API_URL, resource, params);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getOne(resource, params) {\n    try {\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  async getMany() {}\n  getManyReference() {}\n  create(resource, params) {\n    return createTemplate(this.API_URL, params);\n  }\n  async update(resource, params) {\n    try {\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  updateMany() {}\n  delete(resource, params) {\n    return deleteTemplate(this.API_URL, params);\n  }\n  async deleteMany(resource, params) {\n    try {\n      await params.ids.forEach(async (id) => {\n        await deleteTemplate(this.API_URL, { id: id });\n      });\n\n      return { data: [] };\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}\n","/home/hafizur/projects/push-panel/frontend/src/authProvider/index.js",[],"/home/hafizur/projects/push-panel/frontend/src/lists/country.jsx",[],"/home/hafizur/projects/push-panel/frontend/src/lists/sites.jsx",["115"],"import React from \"react\";\n\nimport {\n  List,\n  Datagrid,\n  TextField,\n  Filter,\n  SearchInput,\n  ImageField,\n} from \"react-admin\";\n\nexport default function siteList(props) {\n  const PostFilter = (props) => (\n    <Filter {...props}>\n      <SearchInput source=\"q\" alwaysOn />\n    </Filter>\n  );\n  return (\n    <List {...props} filters={<PostFilter />}>\n      <Datagrid>\n        <TextField source=\"sitename\" />\n        <TextField source=\"clusters\" />\n        <TextField source=\"tokens\" />\n      </Datagrid>\n    </List>\n  );\n}\n","/home/hafizur/projects/push-panel/frontend/src/lists/reports.jsx",[],"/home/hafizur/projects/push-panel/frontend/src/dashboard/index.js",["116"],"import React, { useState, useEffect } from \"react\";\nimport VizG from \"react-vizgrammar\";\nimport { getHeader } from \"../dataProvider/session\";\n//const API_URL = \"https://allinonepush.live/api\";\nimport API_URL from \"../url\";\n\nexport default function Dashboard() {\n  //tokens counts:number\n  const [todaysofar, setTodaysofar] = useState(0);\n  const [yesterday, setyesterday] = useState(0);\n  const [last7days, setlast7days] = useState(0);\n  const [thisMonth, setThisMonth] = useState(0);\n\n  const [totaltokens, setTotaltokens] = useState(0);\n\n  //arrays of token/other counts: Array\n  const [topsites, setTopsites] = useState([]);\n  const [last10dayarray, setLast10dayarray] = useState([]);\n\n  //test\n  let config = {\n    x: \"Day\",\n    charts: [\n      {\n        type: \"line\",\n        y: \"Tokens\",\n        color: \"axisName\",\n        colorDomain: [\"\", \"\", \"\"],\n        fill: \"#000\",\n      },\n    ],\n    maxLength: 7,\n    legend: true,\n  };\n  let metadata = {\n    names: [\"Day\", \"Tokens\", \"axisName\"],\n    types: [\"linear\", \"linear\", \"linear\"],\n  };\n\n  let thedata = [];\n\n  last10dayarray.forEach((site) => {\n    let theday = new Date(site.createdAt);\n    thedata.push([theday.toDateString(), site.tokens, \"Tokens\"]);\n  });\n\n  //top sites\n  let topSitesConfig = {\n    charts: [\n      {\n        type: \"arc\",\n        x: \"tokens\",\n        color: \"sitename\",\n        mode: \"pie\",\n      },\n    ],\n    //legendOrientation: \"top\",\n    legend: true,\n  };\n\n  let topSitesMetadata = {\n    names: [\"tokens\", \"sitename\"],\n    types: [\"linear\", \"linear\"],\n  };\n  let topSitesData = [];\n\n  topsites.forEach((site) => {\n    topSitesData.push([site.tokens, site.sitename]);\n  });\n\n  useEffect(async () => {\n    //declaring a response var and body var\n    let response;\n    let resBody;\n\n    //todaysofar\n    response = await fetch(`${API_URL}/admin/counttokenswithin/1`, {\n      method: \"GET\",\n      headers: getHeader(),\n    });\n    resBody = await response.json();\n    setTodaysofar(resBody.tokens);\n\n    //yesterday by calculating and substracting today\n    let gToday = resBody.tokens;\n    response = await fetch(`${API_URL}/admin/counttokenswithin/2`, {\n      method: \"GET\",\n      headers: getHeader(),\n    });\n    resBody = await response.json();\n    setyesterday(resBody.tokens - gToday);\n\n    //last 7 days\n    response = await fetch(`${API_URL}/admin/counttokenswithin/7`, {\n      method: \"GET\",\n      headers: getHeader(),\n    });\n    resBody = await response.json();\n    setlast7days(resBody.tokens);\n\n    //this month\n    response = await fetch(`${API_URL}/admin/counttokenswithin/30`, {\n      method: \"GET\",\n      headers: getHeader(),\n    });\n    resBody = await response.json();\n    setThisMonth(resBody.tokens);\n\n    //total Tokens\n    response = await fetch(`${API_URL}/admin/counttokenswithin/all`, {\n      method: \"GET\",\n      headers: getHeader(),\n    });\n    resBody = await response.json();\n    setTotaltokens(resBody.tokens);\n\n    //fetching array datas\n    //topsites\n    response = await fetch(\n      `${API_URL}/admin/sites?perPage=5&page=1&sortBy=tokens&sortingOrder=DSC`,\n      {\n        headers: getHeader(),\n      }\n    );\n    resBody = await response.json();\n    setTopsites(resBody.data);\n\n    //last10day\n    response = await fetch(`${API_URL}/admin/tokenswithin/10`, {\n      headers: getHeader(),\n    });\n    resBody = await response.json();\n    console.log(resBody);\n    setLast10dayarray(resBody);\n  }, []);\n\n  //retrive all the data\n\n  return (\n    <div className=\"container py-5\">\n      <div class=\"row\">\n        <div class=\"col-md-8 py-3 border-n mx-1 my-2 text-white bg-primary\">\n          <div class=\"row py-2\">\n            <div class=\"col-md-11 text_col1\">\n              <h5>Estimated Tokens</h5>\n            </div>\n            <div class=\"col-md-1 text_col2\">\n              <svg\n                width=\"1.5em\"\n                height=\"2em\"\n                viewBox=\"0 0 16 16\"\n                class=\"bi bi-three-dots-vertical\"\n                fill=\"currentColor\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  fill-rule=\"evenodd\"\n                  d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\"\n                />\n              </svg>\n            </div>\n          </div>\n          <div class=\"row py-2\">\n            <div class=\"col-md-3 box_col\">\n              <p>Today so far</p>\n              <h3>TK {todaysofar}</h3>\n            </div>\n            <div class=\"col-md-3 box_col\">\n              <p>Yesterday</p>\n              <h3>TK {yesterday}</h3>\n            </div>\n            <div class=\"col-md-3 box_col\">\n              <p>Last 7 days</p>\n              <h3>TK {last7days}</h3>\n            </div>\n            <div class=\"col-md-3 box_col\">\n              <p>This month</p>\n              <h3>TK {thisMonth}</h3>\n            </div>\n          </div>\n        </div>\n        <div class=\"col-md-3 py-3 border-n mx-1 my-2 text-white bg-primary\">\n          <div class=\"row py-2\">\n            <div class=\"col-md-10 text_col1\">\n              <h5>Tokens</h5>\n            </div>\n            <div class=\"col-md-1 text_col2\">\n              <svg\n                width=\"1.5em\"\n                height=\"2em\"\n                viewBox=\"0 0 16 16\"\n                class=\"bi bi-three-dots-vertical\"\n                fill=\"currentColor\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  fill-rule=\"evenodd\"\n                  d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\"\n                />\n              </svg>\n            </div>\n          </div>\n          <div class=\"row py-2\">\n            <div class=\"col-md-12\">\n              <p>Total Tokens</p>\n              <h3>TK {totaltokens}</h3>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"card\" style={{ display: \"block\", margin: \"10px auto\" }}>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Per Day Stats</h5>\n            <VizG\n              config={config}\n              data={thedata}\n              metadata={metadata}\n              onClick={(data) => {\n                /* function to perform */\n              }}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"card\" style={{ display: \"block\", margin: \"10px auto\" }}>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">Top 5 Websites Stats</h5>\n            <VizG\n              config={topSitesConfig}\n              data={topSitesData}\n              metadata={topSitesMetadata}\n              onClick={(data) => {\n                /* function to perform */\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/hafizur/projects/push-panel/frontend/src/sendNotification/index.js",["117","118","119","120"],"import React, { useState, useEffect } from \"react\";\nimport { Eclipse } from \"react-loading-io\";\nimport { getHeader } from \"../dataProvider/session\";\n//import { Show, SimpleShowLayout } from \"react-admin\";\n\n//const API_URL = \"https://allinonepush.live/api\";\nimport API_URL from \"../url\";\nimport { Redirect } from \"react-router\";\n\nexport default function SendNotification() {\n  //form datas\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [icon, setIcon] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [clusters, setClusters] = useState(1);\n\n  //data from api's\n  const [sites, setSites] = useState([]);\n  const [totalClusters, setTotalClusters] = useState(1);\n\n  const [checkedState, setCheckedState] = useState(\n    new Array(sites.length).fill(false)\n  );\n\n  //states for the ui\n  const [isLimitChangable, setIsLimitChangable] = useState(false);\n  const [isSiteSelectable, setIsSiteSelectable] = useState(false);\n  const [isIgnoreListChangable, setIsIgnoreListChangable] = useState(false);\n  const [subRoute, setSubRoute] = useState(\"\");\n\n  const [sitename, setSiteName] = useState(\"localhost\");\n\n  const handleOnChange = (position) => {\n    const updatedCheckedState = checkedState.map((item, index) =>\n      index === position ? !item : item\n    );\n\n    setCheckedState(updatedCheckedState);\n  };\n\n  useEffect(async () => {\n    const response = await fetch(`${API_URL}/admin/sites`, {\n      headers: getHeader(),\n    });\n    const body = await response.json();\n    let countClusters = 0;\n    console.log(body);\n    body.data.forEach((site) => {\n      countClusters += site.clusters;\n    });\n    setTotalClusters(countClusters);\n    setClusters(countClusters);\n    setSites(body.data);\n    setCheckedState(new Array(body.data.length).fill(false));\n  }, []);\n  if (subRoute === \"reports\") {\n    return <Redirect to=\"/Reports\" />;\n  }\n\n  if (subRoute === \"loading\") {\n    return (\n      <div className=\"center\">\n        <Eclipse size={300} />\n      </div>\n    );\n  }\n  return (\n    <div className=\"container\" style={{ marginTop: 20 }}>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n\n          if (title == \"\" || body === \"\" || link == \"\") {\n            alert(\"Title, Body and Url must be provided\");\n            return;\n          }\n          setSubRoute(\"loading\");\n\n          const formData = new FormData();\n\n          const ignoreList = sites.reduce((current, { sitename }, index) => {\n            if (!checkedState[index]) {\n              return current;\n            }\n            return [...current, sitename];\n          }, []);\n\n          const obj = {\n            title: title,\n            body: body,\n            url: link,\n            icon: icon,\n            image: image,\n            clusters: clusters,\n            skipSites: ignoreList,\n          };\n\n          if (isSiteSelectable) {\n            obj.sitename = sitename;\n          }\n\n          var key;\n          for (key in obj) {\n            formData.append(key, obj[key]);\n          }\n\n          //send the notification to the server\n          console.log(\"sending....\");\n          fetch(API_URL + \"/admin/sendnotification\", {\n            headers: getHeader(\"multipart/form-data\"),\n            method: \"POST\",\n            body: formData,\n          }).then((response) => {\n            console.log(response);\n            response.json().then((body) => {\n              setSubRoute(\"reports\");\n              console.log(body);\n            });\n          });\n        }}\n      >\n        <div class=\"form-group\">\n          <label for=\"exampleInputEmail1\">Title:</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"exampleInputEmail1\"\n            aria-describedby=\"emailHelp\"\n            placeholder=\"Enter Title\"\n            value={title}\n            onChange={(e) => {\n              setTitle(e.target.value);\n            }}\n          />\n        </div>\n        <div class=\"form-group\">\n          <label for=\"exampleInputEmail1\">Body:</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"exampleInputEmail1\"\n            aria-describedby=\"emailHelp\"\n            placeholder=\"Enter Body\"\n            value={body}\n            onChange={(e) => {\n              setBody(e.target.value);\n            }}\n          />\n        </div>\n        <div class=\"form-group\">\n          <label for=\"exampleInputEmail1\">Link:</label>\n          <input\n            type=\"text\"\n            class=\"form-control\"\n            id=\"exampleInputEmail1\"\n            aria-describedby=\"emailHelp\"\n            placeholder=\"Enter Link\"\n            value={link}\n            onChange={(e) => {\n              setLink(e.target.value);\n            }}\n          />\n          <small id=\"emailHelp\" class=\"form-text text-muted\">\n            Note : Use http or Https\n          </small>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"exampleFormControlFile1\">Icon:</label>\n          <input\n            type=\"file\"\n            class=\"form-control-file\"\n            id=\"exampleFormControlFile1\"\n            onChange={(e) => {\n              setIcon(e.target.files[0]);\n            }}\n          />\n        </div>\n        <div class=\"form-group\">\n          <label for=\"exampleFormControlFile1\">Image:</label>\n          <input\n            type=\"file\"\n            class=\"form-control-file\"\n            id=\"exampleFormControlFile1\"\n            onChange={(e) => {\n              setImage(e.target.files[0]);\n            }}\n          />\n        </div>\n        <div class=\"form-group\">\n          <label>Target Audience Filter:</label>\n          <br />\n          <div class=\"form-check form-check-inline\">\n            <input\n              class=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"inlineCheckbox1\"\n              value=\"option1\"\n              checked={isLimitChangable}\n              onChange={(e) => {\n                console.log(\"changed\");\n                setIsLimitChangable(e.target.checked);\n              }}\n            />\n            <label class=\"form-check-label\" for=\"inlineCheckbox1\">\n              Limit\n            </label>\n          </div>\n          <div class=\"form-check form-check-inline\">\n            <input\n              class=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"inlineCheckbox2\"\n              value=\"option2\"\n              checked={isSiteSelectable}\n              onChange={(e) => {\n                setIsSiteSelectable(e.target.checked);\n                if (!e.target.checked) {\n                  //if unchecked then set the total and clusters value to max\n                  let thetotalClusters = 0;\n                  sites.forEach((site) => {\n                    thetotalClusters += site.clusters;\n                  });\n                  setTotalClusters(thetotalClusters);\n                  setClusters(thetotalClusters);\n                } else {\n                  //if checked\n                  setTotalClusters(sites[0].clusters);\n                  setClusters(sites[0].clusters);\n                }\n              }}\n            />\n            <label class=\"form-check-label\" for=\"inlineCheckbox2\">\n              Site\n            </label>\n          </div>\n          <div class=\"form-check form-check-inline\">\n            <input\n              class=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"inlineCheckbox1\"\n              value=\"option1\"\n              checked={isIgnoreListChangable}\n              onChange={(e) => {\n                console.log(\"changed\");\n                setIsIgnoreListChangable(e.target.checked);\n              }}\n            />\n            <label class=\"form-check-label\" for=\"inlineCheckbox1\">\n              Ignore Sites\n            </label>\n          </div>\n        </div>\n        {isLimitChangable && (\n          <div class=\"form-group\">\n            <label>Clusters: {clusters}</label>\n            <input\n              type=\"range\"\n              name=\"test\"\n              min=\"0\"\n              max={totalClusters}\n              value={clusters}\n              onChange={(e) => {\n                setClusters(e.target.value);\n              }}\n              style={{\n                width: totalClusters > 9 ? \"100%\" : \"auto\",\n                display: \"block\",\n              }}\n              class=\"slider\"\n              id=\"myRange\"\n            />\n          </div>\n        )}\n        {isSiteSelectable && (\n          <div class=\"form-group\">\n            <label for=\"exampleFormControlSelect1\">Site select:</label>\n            <select\n              class=\"form-control\"\n              id=\"exampleFormControlSelect1\"\n              //value={sitename}\n              onChange={(e) => {\n                let findTheSite = {};\n                sites.forEach((site) => {\n                  if (site.sitename == e.target.value) {\n                    findTheSite = site;\n                  }\n                });\n\n                setTotalClusters(findTheSite.clusters);\n                setClusters(1);\n                setSiteName(e.target.value);\n              }}\n            >\n              {sites.map((site) => {\n                return <option>{site.sitename}</option>;\n              })}\n            </select>\n          </div>\n        )}\n\n        {isIgnoreListChangable && (\n          <div className=\"form-group\">\n            <label for=\"exampleFormControlSelect1\">Ignore Sites:</label>\n            {sites.map(({ sitename }, index) => {\n              return (\n                <div className=\"toppings-list-item\">\n                  <div className=\"left-section\">\n                    <input\n                      type=\"checkbox\"\n                      id={`custom-checkbox-${index}`}\n                      name={sitename}\n                      value={sitename}\n                      checked={checkedState[index]}\n                      onChange={() => handleOnChange(index)}\n                    />\n                    <label htmlFor={`custom-checkbox-${index}`}>\n                      {sitename}\n                    </label>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n        <button type=\"submit\" class=\"btn btn-primary\">\n          Send\n        </button>\n      </form>\n    </div>\n  );\n}\n","/home/hafizur/projects/push-panel/frontend/src/integrate/index.js",[],"/home/hafizur/projects/push-panel/frontend/src/dataProvider/session.js",[],"/home/hafizur/projects/push-panel/frontend/src/dataProvider/getCountriesList.js",[],"/home/hafizur/projects/push-panel/frontend/src/dataProvider/getReportList.js",[],"/home/hafizur/projects/push-panel/frontend/src/dataProvider/getStieList.js",[],"/home/hafizur/projects/push-panel/frontend/src/authProvider/login.js",[],"/home/hafizur/projects/push-panel/frontend/src/dataProvider/getTemplateList.js",[],"/home/hafizur/projects/push-panel/frontend/src/creates/createTemplate.jsx",["121"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Create,\n  FileInput,\n  SimpleForm,\n  TextInput,\n  FileField,\n  CheckboxGroupInput,\n} from \"react-admin\";\nimport API_URL from \"../url\";\nimport { getHeader } from \"../dataProvider/session\";\n\nexport default function CreateTemplate(props) {\n  const [sites, setSites] = useState([]);\n\n  useEffect(async () => {\n    const response = await fetch(`${API_URL}/admin/sites`, {\n      headers: getHeader(),\n    });\n    const body = await response.json();\n    body.data.forEach((d, index) => {\n      body.data[index].id = d.sitename;\n      body.data[index].name = d.sitename;\n    });\n    setSites(body.data);\n  }, []);\n\n  console.log(localStorage.getItem(\"currentUser\"));\n  return (\n    <Create {...props}>\n      <SimpleForm>\n        <TextInput source=\"title\" />\n        <TextInput source=\"body\" />\n        <TextInput source=\"url\" />\n        <CheckboxGroupInput source=\"skipSites\" choices={sites} />\n        <FileInput source=\"icon\" label=\"Select Icon\" accept=\"image/jpeg\">\n          <FileField source=\"src\" title=\"title\" />\n        </FileInput>\n        <FileInput source=\"image\" label=\"Select Image\" accept=\"image/jpeg\">\n          <FileField source=\"src\" title=\"title\" />\n        </FileInput>\n      </SimpleForm>\n    </Create>\n  );\n}\n","/home/hafizur/projects/push-panel/frontend/src/dataProvider/createTemplate.js",["122"],"import { getHeader } from \"./session\";\n\nasync function createTemplate(API_URL, params) {\n  console.log(\"function gets called\", params);\n  let template = params.data;\n  let url = `${API_URL}/admin/templates`;\n\n  console.log(template);\n\n  const formData = new FormData();\n\n  const obj = {\n    title: template.title,\n    body: template.body,\n    url: template.url,\n    icon: template?.icon?.rawFile,\n    image: template?.image?.rawFile,\n    skipSites: template.skipSites,\n  };\n\n  var key;\n  for (key in obj) {\n    formData.append(key, obj[key]);\n  }\n\n  const response = await fetch(API_URL + \"/admin/templates\", {\n    headers: getHeader(\"multipart/form-data\"),\n    method: \"POST\",\n    body: formData,\n  });\n\n  const responseBody = await response.json();\n  console.log(responseBody);\n\n  template.id = responseBody._id;\n\n  return { data: template };\n}\n\nexport default createTemplate;\n","/home/hafizur/projects/push-panel/frontend/src/lists/templates.jsx",["123","124","125"],"import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport API_URL from \"../url\";\nimport { getHeader } from \"../dataProvider/session.js\";\n\nimport {\n  List,\n  Datagrid,\n  TextField,\n  Filter,\n  SearchInput,\n  ImageField,\n  useRefresh,\n} from \"react-admin\";\nimport { useEffect } from \"react\";\nimport Switch from \"@material-ui/core/Switch\";\n\nexport default function TemplateList(props) {\n  const [redirect, setRedirect] = useState(\"\");\n  const [clusters, setClusters] = useState(1);\n\n  useEffect(async () => {\n    const response = await fetch(`${API_URL}/admin/sites`, {\n      headers: getHeader(),\n    });\n    const body = await response.json();\n    let countClusters = 0;\n    console.log(body);\n    body.data.forEach((site) => {\n      countClusters += site.clusters;\n    });\n    console.log(countClusters);\n    setClusters(countClusters);\n  }, []);\n\n  const refresh = useRefresh();\n\n  const PostFilter = (props) => (\n    <Filter {...props}>\n      <SearchInput source=\"q\" alwaysOn />\n    </Filter>\n  );\n\n  const AutoSendSwitch = ({ record }) => {\n    async function block(userIds, state) {\n      await fetch(`${API_URL}/admin/templates/${userIds[0]}`, {\n        method: \"PATCH\",\n        headers: getHeader(),\n        body: JSON.stringify({ autosend: state }),\n      });\n      refresh();\n    }\n    return (\n      <Switch\n        color=\"secondary\"\n        checked={record.autosend == true}\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\n        onChange={(e) => block([record._id], e.target.checked)}\n      />\n    );\n  };\n\n  const SendNotificationButton = ({ record }) => (\n    <Button\n      variant=\"contained\"\n      color=\"secondary\"\n      onClick={async () => {\n        const response = await fetch(`${API_URL}/admin/sendnotification`, {\n          method: \"POST\",\n          headers: getHeader(),\n          body: JSON.stringify({\n            title: record.title,\n            body: record.body,\n            url: record.url,\n            imgurIconUrl: record.icon,\n            imgurImageUrl: record.image,\n            clusters: clusters,\n            skipSites: record.skipSites,\n          }),\n        });\n\n        setRedirect(\"/Reports\");\n      }}\n    >\n      Send\n    </Button>\n  );\n\n  //redirections\n  if (redirect !== \"\") {\n    return <Redirect to={redirect} />;\n  }\n\n  return (\n    <List {...props} filters={<PostFilter />}>\n      <Datagrid>\n        <ImageField source=\"icon\" />\n        <TextField source=\"title\" />\n        <TextField source=\"body\" />\n        <TextField source=\"url\" />\n        <SendNotificationButton />\n        <AutoSendSwitch />\n      </Datagrid>\n    </List>\n  );\n}\n","/home/hafizur/projects/push-panel/frontend/src/dataProvider/deleteTemplate.js",[],"/home/hafizur/projects/push-panel/frontend/src/lists/schedule.jsx",["126","127","128"],"//importing librarys and components\nimport { Link } from \"react-router-dom\";\nimport { Title } from \"react-admin\";\n\n//importing material-ui components\nimport TextField from \"@material-ui/core/TextField\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\n\n//importing constants\nimport API_URL from \"../url\";\nimport { getHeader } from \"../dataProvider/session.js\";\n\n//main function\nfunction Schedule() {\n  //hooks\n\n  //state hooks\n  const [from, setFrom] = useState(\"\");\n  const [to, setTo] = useState(\"\");\n  const [interval, setTheInterval] = useState(\"\");\n  const [submitted, setSubmitted] = useState(false);\n\n  //use effect hooks\n  useEffect(() => {\n    async function getStuffs() {\n      const response = await fetch(`${API_URL}/admin/schedule`, {\n        headers: getHeader(),\n      });\n      const resBody = await response.json();\n      setFrom(resBody.from);\n      setTo(resBody.to);\n      setTheInterval(resBody.interval);\n    }\n    getStuffs();\n  }, []);\n\n  //conditional return\n  return (\n    <>\n      <Title title=\"Schedule\" />\n      <div className=\"container\" style={{ marginTop: 20 }}>\n        <TextField\n          id=\"standard-basic\"\n          variant=\"filled\"\n          disabled={submitted}\n          label=\"From (in hours)\"\n          value={from}\n          onChange={(e) => setFrom(e.target.value)}\n        />\n        <br />\n        <br />\n        <TextField\n          id=\"standard-basic\"\n          variant=\"filled\"\n          disabled={submitted}\n          label=\"To (in hours)\"\n          value={to}\n          onChange={(e) => setTo(e.target.value)}\n        />\n        <br />\n        <br />\n        <TextField\n          id=\"standard-basic\"\n          variant=\"filled\"\n          disabled={submitted}\n          label=\"Interval (in minutes)\"\n          value={interval}\n          onChange={(e) => setTheInterval(e.target.value)}\n        />\n        <br />\n        <br />\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          disabled={submitted}\n          onClick={async () => {\n            setSubmitted(true);\n            await fetch(`${API_URL}/admin/schedule`, {\n              method: \"PATCH\",\n              headers: getHeader(),\n              body: JSON.stringify({\n                from: Number(from),\n                to: Number(to),\n                interval: Number(interval),\n              }),\n            });\n            setSubmitted(false);\n          }}\n        >\n          Update\n        </Button>\n      </div>\n    </>\n  );\n}\n\nexport default Schedule;\n",{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":1,"column":8,"nodeType":"135","messageId":"136","endLine":1,"endColumn":12},{"ruleId":"137","severity":1,"message":"138","line":2,"column":1,"nodeType":"139","endLine":2,"endColumn":50},{"ruleId":"140","severity":1,"message":"141","line":25,"column":6,"nodeType":"142","endLine":25,"endColumn":21,"suggestions":"143"},{"ruleId":"133","severity":1,"message":"144","line":1,"column":10,"nodeType":"135","messageId":"136","endLine":1,"endColumn":19},{"ruleId":"133","severity":1,"message":"145","line":9,"column":3,"nodeType":"135","messageId":"136","endLine":9,"endColumn":13},{"ruleId":"140","severity":1,"message":"146","line":71,"column":13,"nodeType":"147","endLine":135,"endColumn":4},{"ruleId":"140","severity":1,"message":"146","line":43,"column":13,"nodeType":"147","endLine":57,"endColumn":4},{"ruleId":"148","severity":1,"message":"149","line":75,"column":21,"nodeType":"150","messageId":"151","endLine":75,"endColumn":23},{"ruleId":"148","severity":1,"message":"149","line":75,"column":50,"nodeType":"150","messageId":"151","endLine":75,"endColumn":52},{"ruleId":"148","severity":1,"message":"149","line":286,"column":37,"nodeType":"150","messageId":"151","endLine":286,"endColumn":39},{"ruleId":"140","severity":1,"message":"146","line":16,"column":13,"nodeType":"147","endLine":26,"endColumn":4},{"ruleId":"133","severity":1,"message":"152","line":6,"column":7,"nodeType":"135","messageId":"136","endLine":6,"endColumn":10},{"ruleId":"140","severity":1,"message":"146","line":23,"column":13,"nodeType":"147","endLine":35,"endColumn":4},{"ruleId":"148","severity":1,"message":"149","line":57,"column":34,"nodeType":"150","messageId":"151","endLine":57,"endColumn":36},{"ruleId":"133","severity":1,"message":"153","line":69,"column":15,"nodeType":"135","messageId":"136","endLine":69,"endColumn":23},{"ruleId":"133","severity":1,"message":"154","line":2,"column":10,"nodeType":"135","messageId":"136","endLine":2,"endColumn":14},{"ruleId":"133","severity":1,"message":"155","line":7,"column":8,"nodeType":"135","messageId":"136","endLine":7,"endColumn":14},{"ruleId":"133","severity":1,"message":"156","line":8,"column":8,"nodeType":"135","messageId":"136","endLine":8,"endColumn":18},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign literal to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'oldPassword' and 'password'. Either include them or remove the dependency array.","ArrayExpression",["159"],"'getHeader' is defined but never used.","'ImageField' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'url' is assigned a value but never used.","'response' is assigned a value but never used.","'Link' is defined but never used.","'Slider' is defined but never used.","'Typography' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},"Update the dependencies array to be: [buttonClicked, oldPassword, password]",{"range":"162","text":"163"},[666,681],"[buttonClicked, oldPassword, password]"]